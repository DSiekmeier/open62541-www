<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Open62541 Developer Documentation</title>
    <detaileddescription>
<para><ulink url="http://en.wikipedia.org/wiki/OPC_Unified_Architecture">OPC UA</ulink> (short for OPC Unified Architecture) is a protocol for industrial communication and has been standardized in the IEC62541. At its core, OPC UA defines a set of services to interact with a server-side object-oriented information model. Besides the service-calls initiated by the client, push-notification of remote events (such as data changes) can be negotiated with the server. The client/server interaction is mapped either to a binary encoding and TCP-based transmission or to SOAP-based webservices. As of late, OPC UA is marketed as the one standard for non-realtime industrial communication.</para><para>We believe that it is best to understand OPC UA <emphasis>from the inside out</emphasis>, building upon conceptually simple first principles. After establishing a first understanding, we go on explaining how these principles are realized in detail. Examples are given based on the open62541 implementation of the standard.</para><para><heading level="2">OPC UA, a collection of services</heading>
</para><para>In OPC-UA, all communication is based on service calls, each consisting of a request and a response message. Be careful to note the difference between services and methods. Services are pre-defined in the standard and cannot be changed. But you can use the <emphasis>Call</emphasis> service to invoke user-defined methods on the server.</para><para>For completeness, the following tables contain all services defined in the standard. Do not bother with their details yet. We will introduce the different services later in the text. In open62541, each service is implemented in a single function. See the <ref refid="group__services" kindref="compound">Services</ref> section for details.</para><para><bold>Establishing communication</bold></para><para><table rows="5" cols="3"><row>
<entry thead="yes"><para>Discovery Service Set </para></entry><entry thead="yes"><para>SecureChannel Service Set </para></entry><entry thead="yes"><para>Session Service Set  </para></entry></row>
<row>
<entry thead="no"><para>FindServers </para></entry><entry thead="no"><para>OpenSecureChannel </para></entry><entry thead="no"><para>CreateSession  </para></entry></row>
<row>
<entry thead="no"><para>GetEndpoints </para></entry><entry thead="no"><para>CloseSecureChannel </para></entry><entry thead="no"><para>ActivateSession  </para></entry></row>
<row>
<entry thead="no"><para>RegisterServer </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>CloseSession  </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>Cancel  </para></entry></row>
</table>
</para><para><bold>Interaction with the information model</bold></para><para><table rows="6" cols="5"><row>
<entry thead="yes"><para>NodeManagement Service Set </para></entry><entry thead="yes"><para>View Service Set </para></entry><entry thead="yes"><para>Query Service Set </para></entry><entry thead="yes"><para>Attribute Service Set </para></entry><entry thead="yes"><para>Method Service Set  </para></entry></row>
<row>
<entry thead="no"><para>AddNodes </para></entry><entry thead="no"><para>Browse </para></entry><entry thead="no"><para>QueryFirst </para></entry><entry thead="no"><para>Read </para></entry><entry thead="no"><para>Call  </para></entry></row>
<row>
<entry thead="no"><para>AddReferences </para></entry><entry thead="no"><para>BrowseNext </para></entry><entry thead="no"><para>QueryNext </para></entry><entry thead="no"><para>HistoryRead </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>DeleteNodes </para></entry><entry thead="no"><para>TranslateBrowsePathsToNodeIds </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>Write </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para>DeleteReferences </para></entry><entry thead="no"><para>RegisterNodes </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para>HistoryUpdate </para></entry><entry thead="no"><para></para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para>UnregisterNodes </para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry><entry thead="no"><para></para></entry></row>
</table>
</para><para><bold>Notifications</bold></para><para><table rows="8" cols="2"><row>
<entry thead="yes"><para>MonitoredItem Service Set </para></entry><entry thead="yes"><para>Subscription Service Set  </para></entry></row>
<row>
<entry thead="no"><para>CreateMonitoredItems </para></entry><entry thead="no"><para>CreateSubscription  </para></entry></row>
<row>
<entry thead="no"><para>ModifyMonitoredItems </para></entry><entry thead="no"><para>ModifySubscription  </para></entry></row>
<row>
<entry thead="no"><para>SetMonitoringMode </para></entry><entry thead="no"><para>SetPublishingMode  </para></entry></row>
<row>
<entry thead="no"><para>SetTriggering </para></entry><entry thead="no"><para>Publish  </para></entry></row>
<row>
<entry thead="no"><para>DeleteMonitoredItems </para></entry><entry thead="no"><para>Republish  </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para>TransferSubscription  </para></entry></row>
<row>
<entry thead="no"><para></para></entry><entry thead="no"><para>DeleteSubscription  </para></entry></row>
</table>
</para><para><heading level="2">OPC UA, a web of nodes</heading>
</para><para>The information model in each OPC UA server is a web of interconnected nodes. There are eight different types of nodes. Depending on its type, every node contains different attributes. Some attributes, such as the <emphasis>NodeId</emphasis> (unique identifier) and the <emphasis>BrowseName</emphasis>, are contained in all node types.</para><para><table rows="4" cols="2"><row>
<entry thead="no"><para>ReferenceTypeNode </para></entry><entry thead="no"><para>MethodNode  </para></entry></row>
<row>
<entry thead="no"><para>DataTypeNode </para></entry><entry thead="no"><para>ObjectTypeNode  </para></entry></row>
<row>
<entry thead="no"><para>VariableTypeNode </para></entry><entry thead="no"><para>ObjectNode  </para></entry></row>
<row>
<entry thead="no"><para>VariableNode </para></entry><entry thead="no"><para>ViewNode  </para></entry></row>
</table>
</para><para>Nodes are interconnected by directed reference-triples of the form <computeroutput>(nodeid, referencetype, target-nodeid)</computeroutput>. Therefore an OPC UA information model is easiest imagined as a <emphasis>web of nodes</emphasis>. Reference types can be<itemizedlist>
<listitem><para>standard- or user-defined and</para></listitem><listitem><para>either non-hierarchical (e.g., indicating the type of a variable-node) or hierarchical (e.g., indicating a parent-child relationship).</para></listitem></itemizedlist>
</para><para><heading level="2">OPC UA, a protocol</heading>
</para><para>The OPC UA protocol (both binary and XML-based) is based on 25 <emphasis>built-in</emphasis> datatypes. In open62541, these are defined in <ref refid="ua__types_8h" kindref="compound">ua_types.h</ref>.</para><para><table rows="9" cols="3"><row>
<entry thead="no"><para>Boolean </para></entry><entry thead="no"><para>Float </para></entry><entry thead="no"><para>StatusCode  </para></entry></row>
<row>
<entry thead="no"><para>SByte </para></entry><entry thead="no"><para>Double </para></entry><entry thead="no"><para>QualifiedName  </para></entry></row>
<row>
<entry thead="no"><para>Byte </para></entry><entry thead="no"><para>String </para></entry><entry thead="no"><para>LocalizedText  </para></entry></row>
<row>
<entry thead="no"><para>Int16 </para></entry><entry thead="no"><para>DateTime </para></entry><entry thead="no"><para>ExtensionObject  </para></entry></row>
<row>
<entry thead="no"><para>UInt16 </para></entry><entry thead="no"><para>Guid </para></entry><entry thead="no"><para>DataValue  </para></entry></row>
<row>
<entry thead="no"><para>Int32 </para></entry><entry thead="no"><para>ByteString </para></entry><entry thead="no"><para>Variant  </para></entry></row>
<row>
<entry thead="no"><para>UInt32 </para></entry><entry thead="no"><para>XmlElement </para></entry><entry thead="no"><para>DiagnosticInfo  </para></entry></row>
<row>
<entry thead="no"><para>Int64 </para></entry><entry thead="no"><para>NodeId </para></entry><entry thead="no"><para>   </para></entry></row>
<row>
<entry thead="no"><para>UInt64 </para></entry><entry thead="no"><para>ExpandedNodeId </para></entry><entry thead="no"><para>   </para></entry></row>
</table>
</para><para>The builtin datatypes are combined to more complex structures. When the structure contains an array, then the size of the array is stored in an Int32 value just before the array itself. A size of -1 indicates an undefined array. Positive sizes (and zero) have the usual semantics.</para><para>Most importantly, every service has a request and a response message defined as such a data structure. The entire OPC UA protocol revolves around the exchange of these request and response messages. Their exact definitions can be looked up here: <ulink url="https://opcfoundation.org/UA/schemas/Opc.Ua.Types.bsd.xml">https://opcfoundation.org/UA/schemas/Opc.Ua.Types.bsd.xml</ulink>. In open62541, we autogenerate the C-structs to handle the standard-defined structures automatically. See <ref refid="ua__types__generated_8h" kindref="compound">ua_types_generated.h</ref> for comparison. </para>    </detaileddescription>
  </compounddef>
</doxygen>
