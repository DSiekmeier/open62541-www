<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structUA__DataSource" kind="struct" prot="public">
    <compoundname>UA_DataSource</compoundname>
    <includes refid="ua__server_8h" local="no">ua_server.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structUA__DataSource_1a6ae0c43ceaa04826d23967e574c2272f" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* UA_DataSource::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="90" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__DataSource_1a5588b7edccd277327701b48ea7707380" prot="public" static="no" mutable="no">
        <type><ref refid="ua__statuscodes_8h_1a82f92964aaa5dd1c5a1c5d7e9099883c" kindref="member">UA_StatusCode</ref>(*</type>
        <definition>UA_StatusCode(* UA_DataSource::read)(void *handle, const UA_NodeId nodeid, UA_Boolean includeSourceTimeStamp, const UA_NumericRange *range, UA_DataValue *value)</definition>
        <argsstring>)(void *handle, const UA_NodeId nodeid, UA_Boolean includeSourceTimeStamp, const UA_NumericRange *range, UA_DataValue *value)</argsstring>
        <name>read</name>
        <briefdescription>
<para>&gt; A custom pointer to reuse the same datasource functions for multiple sources </para>        </briefdescription>
        <detaileddescription>
<para>Copies the data from the source into the provided value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to user-defined data for the specific data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodeid</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the read node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeSourceTimeStamp</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, then the datasource is expected to set the source timestamp in the returned value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>If not null, then the datasource shall return only a selection of the (nonscalar) data. Set UA_STATUSCODE_BADINDEXRANGEINVALID in the value if this does not apply. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The (non-null) DataValue that is returned to the client. The data source sets the read data, the result status and optionally a sourcetimestamp. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code for logging. Error codes intended for the original caller are set in the value. If an error is returned, then no releasing of the value is done. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="106" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__DataSource_1a5445435c535c75a08ed0d8e7415ba36f" prot="public" static="no" mutable="no">
        <type><ref refid="ua__statuscodes_8h_1a82f92964aaa5dd1c5a1c5d7e9099883c" kindref="member">UA_StatusCode</ref>(*</type>
        <definition>UA_StatusCode(* UA_DataSource::write)(void *handle, const UA_NodeId nodeid, const UA_Variant *data, const UA_NumericRange *range)</definition>
        <argsstring>)(void *handle, const UA_NodeId nodeid, const UA_Variant *data, const UA_NumericRange *range)</argsstring>
        <name>write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write into a data source. The write member of <ref refid="structUA__DataSource" kindref="compound">UA_DataSource</ref> can be empty if the operation is unsupported.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional pointer to user-defined data for the specific data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nodeid</parametername>
</parameternamelist>
<parameterdescription>
<para>Id of the node being written to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be written into the data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional data range. If the data source is scalar or does not support writing of ranges, then an error code is returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a status code that is returned to the user </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="119" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Datasources are the interface to local data providers. It is expected that the read and release callbacks are implemented. The write callback can be set to null. </para>    </detaileddescription>
    <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="89" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="89" bodyend="120"/>
    <listofallmembers>
      <member refid="structUA__DataSource_1a6ae0c43ceaa04826d23967e574c2272f" prot="public" virt="non-virtual"><scope>UA_DataSource</scope><name>handle</name></member>
      <member refid="structUA__DataSource_1a5588b7edccd277327701b48ea7707380" prot="public" virt="non-virtual"><scope>UA_DataSource</scope><name>read</name></member>
      <member refid="structUA__DataSource_1a5445435c535c75a08ed0d8e7415ba36f" prot="public" virt="non-virtual"><scope>UA_DataSource</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
