<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structUA__ServerNetworkLayer" kind="struct" prot="public">
    <compoundname>UA_ServerNetworkLayer</compoundname>
    <includes refid="ua__server_8h" local="no">ua_server.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1aa7d84ac7585cb30c0330603e54444833" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* UA_ServerNetworkLayer::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="485" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1a8b43ba58167b1497d4dbf862984919d3" prot="public" static="no" mutable="no">
        <type><ref refid="structUA__String" kindref="compound">UA_String</ref></type>
        <definition>UA_String UA_ServerNetworkLayer::discoveryUrl</definition>
        <argsstring></argsstring>
        <name>discoveryUrl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="486" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1a6823d39c82b3e1eb939f5738ac4fe8a0" prot="public" static="no" mutable="no">
        <type><ref refid="ua__statuscodes_8h_1a82f92964aaa5dd1c5a1c5d7e9099883c" kindref="member">UA_StatusCode</ref>(*</type>
        <definition>UA_StatusCode(* UA_ServerNetworkLayer::start)(struct UA_ServerNetworkLayer *nl, UA_Logger *logger)</definition>
        <argsstring>)(struct UA_ServerNetworkLayer *nl, UA_Logger *logger)</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starts listening on the the networklayer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nl</parametername>
</parameternamelist>
<parameterdescription>
<para>The network layer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>logger</parametername>
</parameternamelist>
<parameterdescription>
<para>The logger </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns UA_STATUSCODE_GOOD or an error code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="495" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="495" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1ac7e841252adc2bdfe7c821e8fddb6c1b" prot="public" static="no" mutable="no">
        <type><ref refid="ua__types_8h_1a01ce3c3b2fb34ef81c97c313f516004e" kindref="member">UA_Int32</ref>(*</type>
        <definition>UA_Int32(* UA_ServerNetworkLayer::getJobs)(struct UA_ServerNetworkLayer *nl, UA_Job **jobs, UA_UInt16 timeout)</definition>
        <argsstring>)(struct UA_ServerNetworkLayer *nl, UA_Job **jobs, UA_UInt16 timeout)</argsstring>
        <name>getJobs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets called from the main server loop and returns the jobs (accumulated messages and close events) for dispatch.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nl</parametername>
</parameternamelist>
<parameterdescription>
<para>The network layer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jobs</parametername>
</parameternamelist>
<parameterdescription>
<para>When the returned integer is positive, *jobs points to an array of <ref refid="structUA__Job" kindref="compound">UA_Job</ref> of the returned size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout during which an event must arrive in microseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the jobs array. If the result is negative, an error has occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="507" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1a9cddae1292789c1863003b380577bca6" prot="public" static="no" mutable="no">
        <type><ref refid="ua__types_8h_1a01ce3c3b2fb34ef81c97c313f516004e" kindref="member">UA_Int32</ref>(*</type>
        <definition>UA_Int32(* UA_ServerNetworkLayer::stop)(struct UA_ServerNetworkLayer *nl, UA_Job **jobs)</definition>
        <argsstring>)(struct UA_ServerNetworkLayer *nl, UA_Job **jobs)</argsstring>
        <name>stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Closes the network connection and returns all the jobs that need to be finished before the network layer can be safely deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nl</parametername>
</parameternamelist>
<parameterdescription>
<para>The network layer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jobs</parametername>
</parameternamelist>
<parameterdescription>
<para>When the returned integer is positive, jobs points to an array of <ref refid="structUA__Job" kindref="compound">UA_Job</ref> of the returned size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the jobs array. If the result is negative, an error has occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="518" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structUA__ServerNetworkLayer_1ae5c34bf6ec60f594e4696796e653ba65" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* UA_ServerNetworkLayer::deleteMembers)(struct UA_ServerNetworkLayer *nl)</definition>
        <argsstring>)(struct UA_ServerNetworkLayer *nl)</argsstring>
        <name>deleteMembers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes the network layer. Call only after a successful shutdown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="521" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface to the binary network layers. This structure is returned from the function that initializes the network layer. The layer is already bound to a specific port and listening. The functions in the structure are never called in parallel but only sequentially from the server&apos;s main loop. So the network layer does not need to be thread-safe. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="153">
        <label>UA_ServerNetworkLayer</label>
        <link refid="structUA__ServerNetworkLayer"/>
        <childnode refid="154" relation="usage">
          <edgelabel>discoveryUrl</edgelabel>
        </childnode>
      </node>
      <node id="154">
        <label>UA_String</label>
        <link refid="structUA__String"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/acplt/open62541/include/ua_server.h" line="484" bodyfile="/home/travis/build/acplt/open62541/include/ua_server.h" bodystart="484" bodyend="522"/>
    <listofallmembers>
      <member refid="structUA__ServerNetworkLayer_1ae5c34bf6ec60f594e4696796e653ba65" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>deleteMembers</name></member>
      <member refid="structUA__ServerNetworkLayer_1a8b43ba58167b1497d4dbf862984919d3" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>discoveryUrl</name></member>
      <member refid="structUA__ServerNetworkLayer_1ac7e841252adc2bdfe7c821e8fddb6c1b" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>getJobs</name></member>
      <member refid="structUA__ServerNetworkLayer_1aa7d84ac7585cb30c0330603e54444833" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>handle</name></member>
      <member refid="structUA__ServerNetworkLayer_1a6823d39c82b3e1eb939f5738ac4fe8a0" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>start</name></member>
      <member refid="structUA__ServerNetworkLayer_1a9cddae1292789c1863003b380577bca6" prot="public" virt="non-virtual"><scope>UA_ServerNetworkLayer</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
